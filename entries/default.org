#+hugo_base_dir: ../
#+STARTUP: content
#+macro: latex @@html:<span class="latex">L<sup>A</sup>T<sub>E</sub>X</span>@@
#+options: ^:{}
#+macro: srclink (eval (org-hugo-get-link-to-orgfile "https://github.com/takaxp/blog/blame/master/entries/" "see Orgfile"))

* 2018
:PROPERTIES:
:EXPORT_HUGO_SECTION: 2018
:END:
** DONE ox-hugo テスト                                                :@hugo:
   CLOSED: [2018-08-20 Mon 18:23]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-ox-hugo
:END:

=hugo= と =ox-hugo= を利用したブログ執筆の試験です．

*** Heading1
**** Heading 2

  コンテンツ

**** Heading 3
    - [ ] a
    - [X] b

**** Source blocks

    - elisp

      #+BEGIN_SRC emacs-lisp
      (message "Hello! World")
      #+END_SRC

    - Centered

      #+BEGIN_CENTER
      Centered text
      #+END_CENTER

    - cpp

      #+BEGIN_SRC cpp
      #include <iostream>
      using namespace std;

      int main(){
        cout << "Hello, World!" << endl;
        return 1;
      }
      #+END_SRC

***** Heading 4

  $H(z)$

*** 表

  #+CAPTION: てーぶる
  | 1 | 3 |
  |---+---|
  | 2 | 4 |

*** 装飾

  *太字* , _下線_ , /イタリック/

*** リンク

  [[http://google.co.jp]]， [[http://google.com/][ぐーぐる．こむ]]

*** タスク
**** TODO タスク
     DEADLINE: <2017-03-01 Wed>
** DONE twitter 組み込みテスト                                        :@hugo:
   CLOSED: [2018-08-20 Mon 20:10]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-twitter-card
:END:

Twitter を組み込めるのかを試験します．

{{< tweet 1031404732470898689 >}}

*** References
 - https://gohugo.io/content-management/shortcodes/#example-tweet-input

** DONE YouTube 組み込みテスト                                        :@hugo:
   CLOSED: [2018-08-20 Mon 20:28]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-youtube
:END:

YouTube の動画を組み込めるのかを試験します．

{{< youtube kaw75f11fPU >}}

*** References
 - [[https://gohugo.io/content-management/shortcodes/#example-youtube-input][Shortcodes | Hugo]]

** DONE 数式の展開テスト                                              :@hugo:
   CLOSED: [2018-08-21 Tue 02:05]
:PROPERTIES:
:EXPORT_FILE_NAME: a-mathjax-text
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:CREATED:  [2018-08-21 Tue 02:04]
:END:
*** inline
An inline equation $f(x)$.

*** stand alone without numbering
A standalone equation:
$$ E = mc^{2} $$

*** full equation with numbering

+*うまくいかない* 通常のHTML出力では正しく式番号がレンダリングされる．+

=ox-hugo= の設定では，

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+end_quote

だが，通常のHTML出力では，

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML
#+end_quote

である．

And a full @@html:<span class="latex">L<sup>A</sup>T<sub>E</sub>X</span>@@ equation will be displayed as

\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}

, and could be referenced by (\ref{eq:1}).

最終的に，リファレンスに示された =mathjax-config.js= を利用すればOK．

導入は， =./static/js/mathjax-config.js= として [[https://ox-hugo.scripter.co/js/mathjax-config.js][mathjax-config.js]] を保存し，テーマの中で =mathjax= のスクリプトを記述している箇所に，以下を追加する．

#+begin_src javascript
<!--
 https://github.com/mathjax/MathJax/issues/1988#issuecomment-384978927
 Use plain Javascript to prevent the use of window.eval(). Then
 'unsafe-eval' won't be needed to be added to script-src CSP.
 Also move the mathjax config to a separate file from the inline script so
 that 'unsafe-inline can also be removed from script-src CSP.
-->
<script src="{{ "js/mathjax-config.js" | absURL }}"></script>
#+end_src

これで式番号と =\ref= が効くようになる．

=ox-hugo= の設定は，以下（本来の値）でOKだった．

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+end_quote

*** References
 - https://github.com/kaushalmodi/hugo-bare-min-theme/blob/master/layouts/partials/mathjax.html
 - https://ox-hugo.scripter.co/js/mathjax-config.js
** DONE 今週のパスタ                                               :@cooking:
   CLOSED: [2018-08-21 Tue 10:53]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-cooking-report-with-twitter
:CREATED:  [2018-08-21 Tue 10:52]
:END:

こんな感じで調理しています．

{{< tweet 1031028246769426433 >}}

{{< tweet 1028952922116173825 >}}

** DONE Gistの展開テスト                                              :@hugo:
   CLOSED: [2018-08-21 Tue 16:25]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-gist
:END:

ビルトインの shorcodes を使って簡単にできます．

{{< gist takaxp 8f83f07d3fc4b711d2d18f5f82767524 >}}

** DONE アマゾンアフィリエイトコードの展開テスト                      :@hugo:
   CLOSED: [2018-08-23 Thu 00:37]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-asin-shortcode
:CREATED:  [2018-08-23 Thu 00:36]
:END:

[[https://gohugo.io/templates/shortcode-templates/][HUGO shortcodes]]を使って，Amazonアフィリエイトのリンクを組み込みます．

{{< asin B01N3PBDGJ >}}

動かすのはちょっと大変．以下は，今回のために作った shortcodes で，これ加えて，[[https://affiliate.amazon.co.jp/assoc_credentials/home][Product Advertising API ]]を用いたXMLデータのダウンロードスクリプト，XMLからJSON形式のデータを作り， =./data/asin/B01N3PBDGJ.json= として保存しておく必要があります．

#+begin_src html
{{- $asin := .Get 0 -}}
{{- $json := index .Site.Data.asin $asin -}}
{{- $item := $json.ItemLookupResponse.Items.Item -}}
{{- $title := $item.ItemAttributes.Title -}}
{{- $price := $item.OfferSummary.LowestNewPrice -}}
{{- $image := $item.SmallImage -}}
<div class="asin-box">
  <div class="asin-title">
    <a href="{{ $item.DetailPageURL.value }}" target="_blank">
      製品名: {{ $title.value }}
    </a><br/>
    価格: {{ $price.Amount.value }} {{ $price.CurrencyCode.value }}<br/>
    ASIN: {{ $asin }}
  </div>
  <div class="asin-image">
    <a href="{{ $item.DetailPageURL.value }}" target="_blank">
      <img src="{{ $image.URL.value }}" alt="{{ $title.value }}" width="{{ $image.Width.value }}" height="{{ $image.Height.value }}"/>
    </a>
  </div>
  <div class="asin-metadata"></div>
</div>
#+end_src

書籍だとこんな感じ．

{{< asin 4799106023 >}}

{{< asin 4883998304 >}}

*** Updated (2018-09-04@00:15)

参照する価格のフィールドが，ISBNで拾うアイテムと異なるため修正した．前者は定価で，後者は現在の最安値のようだ．

#+begin_src html
<!-- {{- $price := $item.ItemAttributes.ListPrice -}} -->
{{- $price := $item.OfferSummary.LowestNewPrice -}}
#+end_src

*** References
 - [[https://frdmtoplay.com/using-curl-with-the-amazon-product-request-api/][Using curl with the Amazon Product Request API]]
 - [[http://associates-amazon.s3.amazonaws.com/signed-requests/helper/index.html][Signed Requests Helper - Amazon Product Advertising API]]
 - [[https://docs.aws.amazon.com/AWSECommerceService/latest/DG/HMACSignatures.html][HMAC-SHA256 Signatures for REST Requests - Product Advertising API]]
 - [[https://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html][Example REST Requests - Product Advertising API]]
** DONE 画像の埋め込みテスト                                          :@hugo:
   CLOSED: [2018-08-24 Fri 14:02]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-images
:CREATED:  [2018-08-23 Thu 02:19]
:END:

まず前提として，このサイトのようにドメイン直下にディレクトリを作ってブログを運用する場合には，デフォルトだと =figure= shotcode が正しく動作しない．対応策は， =config.toml= で =canonifyURLs=true= にすること．

画像やその他のファイルの置き場所は，実は繊細な問題で，油断するとサイトが肥大化して管理が行き詰まるし，逆に外部サービスに依存するとサービス停止時に大変なことになる．そして今回は，画像を org バッファでインライン展開するかどうかも変数に入るので中々良い回答が出てこない．

=ox-hugo= の場合は， org バッファのディレクトリに画像を置いて，インライン展開に対応しつつ，content フォルダへの Markdown 出力時に public フォルダへ画像をコピーするという手法も取れる．すると，orgバッファではインライン画像を表示できて，公開したサイトでも正しく画像が表示されるようになる．が，当然ながら Hugoのディレクトリが肥大化する．

ということで，ローカルの肥大化を避けたいので，当面は以下のフローで画像を管理することにする．

1. =static/files/2018= を作成して，2018年のコンテンツをここに置く
2. サーバに同期する
3. org ファイルでは =#+link= を使ってURLを短縮化
4. org ファイルには短縮名で画像を指定する

短縮名設定は，org バッファの先頭で，
#+begin_src org
#+link: files https://pxaka.tokyo/blog/files/2018/
#+end_src
と記述して，同行上で =C-c C-c= で忘れずに有効化する．

後は，通常のリンク記述で =files:= を使えばパスを簡略記入できる．

#+begin_src org
[[files:twitter.jpg]]
#+end_src

この記述は，

#+begin_src 
[[https://pxaka.tokyo/blog/files/2018/twitter.jpg]]
#+end_src

に展開されるので，サーバにファイルが置かれていれば，確実に画像を埋め込むことができる．将来ファイルパスやドメインを変えたとしても， =#+link= 側の値を変えれば良い．

万が一ローカルが肥大化したら， =./static/files= を削除して，サーバにだけコンテンツを置く，或いは， =./static/files= はシンボリックリンクで飛ばしてもよい．

最終的には，
1. D&Dでサーバ上の所定のディレクトリにサーバアップロード
2. アップロード時にサムネイルを同時作成
3. shortcodes のリンク生成を改良して，リンク先は大きな画像，表示は小さな画像を使う
とするのが目標．その他のファイル（PDFとかExcelとか）はアップロード時にサムネイル作成ってのも良い．

以下，適当に実験．

#+attr_html: :width 128px
[[file:/files/2018/twitter.jpg]]

#+attr_html: :width 128px
[[file:~/Dropbox/org/blog/static/files/2018/twitter.jpg][/files/2018/twitter.jpg]]

http://localhost:1313/blog/files/2018/twitter.jpg

#+attr_html: :width 128px
[[../static/files/2018/twitter.jpg][files/2018/twitter.jpg]]

[[https://pbs.twimg.com/profile_images/892836904202149888/p_UbMC5Q_400x400.jpg]]

#+attr_html: :width 128px
https://pbs.twimg.com/profile_images/892836904202149888/p_UbMC5Q_400x400.jpg

#+attr_html: :width 128px
[[https://pxaka.tokyo/owncloud/index.php/s/sf1CNSc3oLfKfuq]]

#+attr_html: :width 128px
[[files:%E3%81%A4%E3%81%84%E3%81%A3%E3%81%9F %E3%81%AE %E7%94%BB%E5%83%8F.jpg]]

#+attr_html: :width 100px
[[files:twitter.jpg]]

=#+link= に非依存で正しく表示される．インライン不可．

[[/files/2018/twitter.jpg]]

#+attr_html: :width 128px
[[files:twitter.jpg][file:/files/2018/twitter.jpg]]

*** References
 - [[https://github.com/gohugoio/hugo/issues/4562][Figure shortcode with baseURL · Issue #4562 · gohugoio/hugo]]
** DONE ファイル名をUUIDで自動生成するテスト                          :@hugo:
   CLOSED: [2018-08-24 Fri 19:44]
:PROPERTIES:
:EXPORT_FILE_NAME: 44febe88-04a5-9bc4-6bfb-678a8477a0ed
:CREATED:  [2018-08-24 Fri 19:39]
:END:

次のように =org-capture= を準備して， =C-c r B= 押下すると，テンプレートが立ち上がる．カーソルはタイトル行に置かれる． =C-c C-c= を押してそのまま保存でも良いが，それなりの分量の文章を書くならば， =C-u C-c C-c= として保存先のサブツリーに移動してから編集する方がより安全といえる．

#+begin_src emacs-lisp
(with-eval-after-load "org-capture"
  (defvar org-capture-blog-file
    (concat org-directory "blog/entries/default.org"))
  (setq org-capture-templates
        `(("B" "Create new post for imadenale blog (UUID)" entry
           (file+headline ,org-capture-blog-file ,(format-time-string "%Y"))
           "** TODO %?\n:PROPERTIES:\n:EXPORT_FILE_NAME: %(uuid-string)\n:END:\n")
          ("b" "Create new post for imadenale blog" entry
           (file+headline ,org-capture-blog-file ,(format-time-string "%Y"))
           "** TODO \n:PROPERTIES:\n:EXPORT_FILE_NAME: %?\n:END:\n"))))
#+end_src
** DONE Hugo の data ディレクトリ                                     :@hugo:
   CLOSED: [2018-08-25 Sat 04:11]
:PROPERTIES:
:EXPORT_FILE_NAME: 62d73d4b-439b-cf74-1bf3-ecae75bd7bd2
:CREATED:  [2018-08-25 Sat 03:54]
:END:

環境構築がほぼ完了．基本的な処理フローは？と言えば，「書いて，デプロイ」のホント2ステップだけ．

1. Emacs Org Mode でメモを取るように書く（org-capture経由もOK）
2. deploy スクリプトを走らせる（サーバにrsyncしたり，githubにpush）

以上，楽すぎた．ありがとう [[https://orgmode.org][Org Mode]]，[[https://gohugo.io/][Hugo]]，[[https://ox-hugo.scripter.co/][ox-hugo]] たち！

さて，Hugoさん， =data= 以下にいわゆるプロセッシング対象のデータを =json= 形式で配置すると，[[https://gohugo.io/content-management/shortcodes/][shortcodes]] で色々と楽しめるのね．これって，ちょっと工夫すれば，料理のレシピ管理に使えるよという話かなと．なお保存方法は =json= 以外に， =yaml=, =toml= もOK．

{{< youtube id="FyPgSuwIMWQ" class="my-yt" >}}

で，Go, Json, SQLite でざっくり調べると，なかなに面白い情報があって，これはテンション上がる．

*** References
 - [[https://gohugo.io/templates/data-templates/][Data Templates | Hugo]]
 - [[https://stackoverflow.com/questions/48534992/json-fields-from-sqlite3-in-golang][sqlite - JSON fields from sqlite3 in golang - Stack Overflow]]
** DONE 完熟あらごしトマトを使ってみた                             :@cooking:
   CLOSED: [2018-08-28 Tue 02:57]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-with-new-tomato-source
:EXPORT_HUGO_TAGS: "pasta" "tomato" "cream"
:CREATED:  [2018-08-28 Tue 02:40]
:END:

近所のスーパーで試したことのないトマトソースを見つけたので使ってみた．味付けされていないプレーンなソースなので，玉ねぎをソテーして混ぜて使う．

{{< asin B015FIJYZ8 >}}

価格は1つのパックあたり100円ちょっとで，缶で売られているプレーンなトマトソースよりも少し安めの印象．

{{< tweet 1033555146364440576 >}}

今回は，アンチョビ・ケイパーを使ってプッタネスカ風のベースを作って，牛乳を少し加えてみた．加えた牛乳の分量で言えば，80[cc]程度（二皿用）．いわゆるトマトクリーム的な味わいを期待したけど，やはりちょっと牛乳を加えたくらいでは中途半端になり，しかも生クリームより水分が多いので，ソースを詰めようとする間に風味が飛んでしまうことがわかった．クリームソースには普通に生クリームを使うのが良さそうね．太るよね．

{{< tweet 1033571011898163200 >}}

実は玉ねぎを炒める時に，若干火を入れすぎてしまい，トマトソースはとても濃い色に．牛乳を加えることで，ソースの色が落ち着いた感じになった．味はまぁまぁ．

ごちそうさまでした．
** DONE (ベビー)ホタテのトマトクリームパスタ                       :@cooking:
   CLOSED: [2018-08-30 Thu 13:13]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-tomato-fresh-cream
:EXPORT_HUGO_TAGS: "pasta" "tomato" "cream"
:CREATED:  [2018-09-02 Sun 20:40]
:END:

スーパーで生クリームを探したら，以前は置かれていなかった100[ml]タイプが置かれていたので購入．早速，前回は納得がいかなかったトマトクリームに再挑戦．具材は魚貝が良さそうなので，ベビーホタテを採用．

{{< tweet 1034768304051642368 >}}

にんにく，玉ねぎ，そして貝柱以外を細かく刻んでまずソテー．アンチョビを入れてオイルに馴染ませたら，トマトソースを入れて加熱，温度が安定したら貝柱を入れて，最後に生クリームを投入．黒胡椒を挽いて完成．

それっぽい見た目とそれっぽい味になったけど，ちょっと違う感じ．

生クリームは適当に使う食材じゃないことはわかった．

ごちそうさまでした．

[[https://github.com/takaxp/blog/blame/master/entries/default.org#L400][see Orgfile]]

** DONE 和風クリームパスタに挑戦                                   :@cooking:
   CLOSED: [2018-09-02 Sun 20:47]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-fresh-cream-jp-style
:EXPORT_HUGO_TAGS: "pasta" "cream"
:CREATED:  [2018-09-02 Sun 20:40]
:END:

教科書として常備している落合シェフの本．

{{< asin 4388062081 >}}

今回はこの教科書をちゃんと読んでから，自分の中ではハズレのない和風パスタに応用してみた．とても旨かった．

{{< tweet 1036104469098840064 >}}

先日のトマトクリームパスタがいまいちだったので，シェフの教科書をよく読んでみると，生クリームの使い方にはいくつかのセオリーがあるようだ．教科書の ~P.118~ にある「生ハムとグリーンピース入りクリーム風味のフェットチーネ」のレシピから引用する．

#+begin_quote
クリーム系のソースの決め手となるのが塩加減で、これがむずかしい。
#+end_quote

#+begin_quote
最終的な塩見はやや強めにきかせる。
#+end_quote

#+begin_quote
最初のサラリとした常態から、この程度のとろみが付けばOK。（略）煮詰めてコクを出し、（略）とろみをつける。
#+end_quote

なるほど，なるほど．ちなみに教科書のこのメニューは，「パン・プロ・ピー」と呼ばれているらしい。

#+begin_quote
イタリアでは、パンナ（生クリーム）、プロシュート（生ハム）、ピゼッリ（豆）の頭をとって，「パン・プロ・ピー」の愛称で呼ばれている、おなじみのメニューだ。
#+end_quote

さて，今回のチャレンジで総じて理解したのは，大きく4つ．
- 生クリームを使うと，麺の舌触りが変わり滑らかになる．
- 生クリームは沸騰させてはだめだが，詰めるのはOK．
- 塩見は強めを意識する．
- 和風と合わせても大丈夫，むしろ旨い．

#+caption: レシピ（材料・二皿分）
| 材料       | 分量 | 単位 |
|------------+------+------|
| 玉ねぎ(中) |  1/4 | 個   |
| ベーコン   | 適量 |      |
| 舞茸       | 適量 |      |
| みりん     |   20 | [cc] |
| 白だし     |   40 | [cc] |
| 生クリーム |   60 | [cc] |
| オイル     |   30 | [cc] |
| 茹で汁(1%) |   30 | [cc] |
| バター     |   10 | [g]  |
| パスタ     |  170 | [g]  |

いつもの和風パスタは，みりん・白だし・醤油でベースを作るけども，醤油を入れると生クリームの色が活かせないと判断して，今回は白だしだけにした．また上記の「強めの塩見」は，バター，茹で汁，そして白だしを使うことでクリアしている．

まだまだ改良は必要だろうけども，初回にしては味も見た目も満足．

ごちそうさまでした．

[[https://github.com/takaxp/blog/blame/master/entries/default.org#L422][see Orgfile]]
** DONE 記事の Org file にリンクを貼る                                :@hugo:
   CLOSED: [2018-09-03 Mon 17:02]
:PROPERTIES:
:EXPORT_FILE_NAME: a-link-to-the-original-org-source-file
:EXPORT_HUGO_TAGS: "orgmode"
:CREATED:  [2018-09-03 Mon 16:55]
:END:

せっかく [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] で記事を書いているので，Hugo記事のソースとなる orgfile を明示したい．

毎度手動でそのリンクを生成するのは面倒なので，マクロで実現してみる．

まず，マクロから呼び出す関数を書く．

#+begin_src emacs-lisp
(defun org-hugo-get-link-to-orgfile (uri alt)
      "Return a formatted link to the original Org file in Github."
      (let ((line (save-excursion
                    (save-restriction
                      (unless (org-at-heading-p)
                        (org-previous-visible-heading 1))
                      (line-number-at-pos)))))
        (concat "[[" uri (file-name-nondirectory (buffer-file-name))
                "#L" (format "%d" line) "][" alt "]]")))
#+end_src

で，これを，編集中の orgfile の =#+macro= で使う．こんな感じ．

#+begin_src org
#+macro: srclink (eval (org-hugo-get-link-to-orgfile "https://github.com/takaxp/blog/blame/master/entries/" "see Orgfile"))
#+end_src

第一引数を，ソースを配置するサイトのURI．ファイル名の直前までを指定する．スラッシュを忘れずに．

第二引数に，HTML上で表示されるリンク名を指定する．

そして，記事の執筆時に，以下を埋め込めば，対応するソース（行単位）に転送してくれるリンクがエクスポート時に勝手に埋め込まれる．

#+begin_src org
{{{srclink}}}
#+end_src

しばらくこれで運用してみる．

[[https://github.com/takaxp/blog/blame/master/entries/default.org#L485][see Orgfile]]

*** Updated (2018-09-04@00:44)

このアプローチだと不十分とわかった．同じファイルの別箇所を編集したときに，headingの行がズレるが，このマクロが含まれているすべての subtree を更新しなければそのズレを反映させられない．ｸﾏｯﾀ...
** DONE 辛子明太子のペペロンチーノ                                 :@cooking:
   CLOSED: [2018-09-11 Tue 00:54]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-peperoncino-spicy-seasoned-cod-roe
:EXPORT_HUGO_TAGS: pasta salt
:CREATED:  [2018-09-11 Tue 00:54]
:END:

思い立って辛子明太子をパスタに合わせてみた．簡単なところからということで，普通のペペロンチーノの最後に投入．水菜も合わせてみた．水菜はカラスミとよく合う．

{{< tweet 1038290537504067584 >}}

辛子明太子の量は，中サイズなら一人一本入れても良さそう．少ないと食感だけしか残らず，味が感じられなくなる．その点ではカラスミはとても風味が強い食材といえる．

** DONE 頂戴したホールトマト缶でポモドーロ                         :@cooking:
   CLOSED: [2018-09-11 Tue 01:02]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-pomodoro-montebello
:EXPORT_HUGO_TAGS: pasta tomato
:CREATED:  [2018-09-11 Tue 01:02]
:END:

モンテベッロのホールトマト缶を戴いたので，さっそくポモドーロにしてみた．余っていたベーコンもおまけでちょっと使用した．

{{< tweet 1038639448345341952 >}}

このホールトマト缶は水っぽくなく，蓋を開けた瞬間に濃厚なソースとわかる．色も綺麗だし，美味しそう．

ソフリットを作る暇はなかったので，簡易的に玉ねぎを炒めて，にんにくとローリエを入れてトマトソースに．

最後の仕上げの塩はだいぶ入れたつもりだったけど，食べてみたら少々味がぼけていた．ソースの濃さに合わせて塩味も微調整しないともったいないね．

** TODO スケーラブルなEmacs起動法(1)                                 :@emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: scalable-emacs-booting-p1
:EXPORT_HUGO_TAGS: 
:CREATED:  [2018-09-15 Sat 14:22]
:END:

Emacsを使い始めて基本的な操作に慣れてくると，たくさんのパッケージをインストールしたり， =init.el= に凝った設定を追加していくようになります．楽しいですよね．はい，わかります．

しかしそうすると，必然的に Emacs の起動に時間がかかるようになります．

起動時にたくさんのパッケージを一度に読み込めば，確かに起動後はストレスなく作業できるでしょう．一度にすべて読み込んで，セッション復元，ブックマーク・履歴復元，Helm起動，辞書の準備，カーソルやフレーム・モードライン等の視覚効果など，そして，[[https://orgmode.org/][Org Mode]] 等の各メジャーモードの設定群をすべて適用しておく．それも悪くありません．しかし，起動時のストレスは，あなたの精神を少しずつ蝕んでいくでしょう．

私は，好みに合わせてたくさんのパッケージを使える状態までカスタマイズしたEmacsを *フルアーマーEmacs* と呼ぶことにしました．ハイスペックな環境なら期待のパフォーマンスを発揮するでしょう．

しかし，普通の環境ではそうは問屋が卸しません． *フルアーマーEmacs* の扱いは，一般庶民・オールドタイプには難しいのです．

そんな *フルアーマーEmacs* であっても，ストレスを感じることなく高速起動する一つの手法を，私は *スケーラブルなEmacs起動法* と呼ぶことにしました．以下，そのポイントを記述していきます．

*** 高速起動の阻害要因

まず， *フルアーマー* ではない素のEmacsは，どれだけ素早く起動するのでしょうか．

=emacs -q -nw= で素のEmacsを起動し， =M-x emacs-init-time= をすると，起動に費やした時間が表示されます．この値は，ほとんどの環境で，1秒以下でしょう．私の環境では =0.0 seconds= と表示されます．50[ms]未満ということです．一瞬です．ストレスフリー．

では，設定を増やしていくと，なぜ起動が遅くなるのでしょうか．以下に，主だった原因を示します．

1. 起動時にGCが動いている
2. トップレベルでパッケージを =require= （または =load= ） している
3. *scratch* バッファで不要なモードを立ち上げない
   - [[https://qiita.com/takaxp/items/12c01bff4c687b3f242b][高速起動用ミニマム*scratch*バッファ - Qiita]]
4. 実は不要な設定をトップレベルで適用している
5. 各パッケージのインストール先が分散し， =load-path= が肥大化している

*** 起動時にGCが動いている

これは，設定の書き方だけに着目して高速化を目指す時の盲点です．Emacsが要求するメモリ量は，GUI利用の *フルアーマー* になると軽く 100[MB]を超えます．そして不運にも起動時にGCが働くと，起動時間が大幅に増えてしまいます．秒単位で増えますので，まずこれを防ぎます．

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold 134217728) ;; 128MB
(setq garbage-collection-messages t) ;; GC実行時にメッセージを出す
#+END_SRC

この例では，起動後のメモリ専有量がおおよそ 100[MB]程度になると仮定して，GCのしきい値を 128[MB]に設定しています．これで起動時にGCを起こさずに済みます．実際に起動中にGCを起こすかどうかは， =garbage-collection-messages= を設定することで，容易に確認できます．

この改善策自体は，よく知られているものです．

*** require ではなく with-eval-after-load を使う

=package.el= 等で各パッケージが統一的に管理されるようになった現在（Version 24以降）では，いわゆる =autoload= による遅延処理が働くため， =require= を使いながら書く設定を， =with-eval-after-load= に書き換えるだけで，起動は高速化されます．

#+begin_src emacs-lisp
(when (require 'hoge nil t) ;; ここに時間がかかる．
  ;; hoge に関する設定を記述する．
  ;; hoge の読み込みに失敗すれば，すべてスキップされ，
  ;; 起動シーケンスが継続する．
  )
#+end_src

これを，以下のように書き換えるだけです．いつ =hoge.el= が読み込まれるかと言えば，パッケージの中で =autoload= 指定されている関数らが，Emacs 起動後に最初に呼ばれるタイミングです．すなわち，必要なときに読み込まれるため，起動を邪魔しません．

#+begin_src emacs-lisp
(with-eval-after-load "hoge"
  ;; hoge に関する設定をここに記述する．
  )
#+end_src

起動時に本当に必要な設定（カーソルの色など視覚効果に関するものなど）以外は，極力， =with-eval-after-load= で括り，所定のパッケージが読み込まれた後で発動するようにしましょう．

*** postpone.el のススメ

さて， =with-eval-after-load= の中に設定を書けば，各設定が遅延読み込みされ，高速化に繋がることが理解されたと思います．しかしながら，設定によっては， =with-eval-after-load= の適切な適用先が無いことも想定されます．

例えば，Emacs Version 26.1 から導入された， =pixel-scroll-mode= の設定．起動時にスクロールバーを表示しないのならば，トップレベルで以下を設定しない方が良いです．でも =with-eval-after-load= でぶら下げるべきパッケージは？

#+begin_src emacs-lisp
(when (fboundp 'pixel-scroll-mode) ;; 存在するなら，すぐにマイナーモード発動
    (pixel-scroll-mode 1))
#+end_src

或いは， =selected.el= の設定群．このパッケージは，任意の文字列を選択した時に発動すべきものなので，起動時には不要です．でもどこにぶら下げれば良いでしょうか．

これらのように， *起動時には不要だが，起動直後からメジャーモードの起動直前までに必要* な設定があることがわかります．通常は，それらをトップレベルでのべた書きや前出の =(when (require 'hoge nil t)...)= で設定するために，起動が遅くなるのです．

そこで導入するのが [[https://github.com/takaxp/postpone][postpone.el]] です．起動時に適用されてしまうトップレベルで設定したくないが，起動後にすぐ使いたい設定群を， =postpone= にぶら下げればOKです．

以下は，従来は =(when (require 'selected nil t))= をトップレベルに記載していたものを， =postpone.el= を導入し， =with-eval-after-load= で包むようにした例です．

キーバインドの設定や独自関数の定義等，様々な処理を記述していますが，実際のところ起動時には不要です．しかし一方で，特定のメジャーモードの発動に依存せず，いつでも使えるようにしておきたい設定群です．

#+begin_src emacs-lisp
(with-eval-after-load "postpone"
  (when (require 'selected nil t)
    (define-key selected-keymap (kbd ";") #'comment-dwim)
    (define-key selected-keymap (kbd "e") #'my-eval-region-echo)
    ;; (define-key selected-keymap (kbd "E") #'my-eval-region-echo-as-function)
    (define-key selected-keymap (kbd "=") #'count-words-region)
    (when (require 'helpful nil t)
      (define-key selected-keymap (kbd "m") #'helpful-macro))
    (define-key selected-keymap (kbd "f")
      (if (fboundp 'helpful-function) #'helpful-function #'describe-function))
    (define-key selected-keymap (kbd "v")
      (if (fboundp 'helpful-variable) #'helpful-variable #'describe-variable))
    (define-key selected-keymap (kbd "w") #'osx-dictionary-search-pointer)
    (define-key selected-keymap (kbd "5") #'query-replace-from-region)
    (define-key selected-keymap (kbd "g") #'my-google-this)
    (define-key selected-keymap (kbd "s") #'osx-lib-say-region)
    (define-key selected-keymap (kbd "q") #'selected-off)
    (define-key selected-keymap (kbd "x") #'my-hex-to-decimal)
    (define-key selected-keymap (kbd "X") #'my-decimal-to-hex)

    (defun my-eval-region-echo ()
      (interactive)
      (when mark-active
        (eval-region (region-beginning) (region-end) t)))
    (setq selected-org-mode-map (make-sparse-keymap))
    (define-key selected-org-mode-map (kbd "t") #'org-table-convert-region)

    (when (autoload-if-found
           '(my-org-list-insert-items my-org-list-insert-checkbox-into-items)
           "utility" nil t)

      (define-key selected-keymap (kbd "-") #'my-org-list-insert-items)
      (define-key selected-keymap (kbd "_")
        #'my-org-list-insert-checkbox-into-items))

    (when (autoload-if-found
           '(helm-selected)
           "helm-selected" nil t)
      (define-key selected-keymap (kbd "h") 'helm-selected))

    (when (require 'help-fns+ nil t)
      (defun my-describe-selected-keymap ()
        (interactive)
        (describe-keymap 'selected-keymap))
      (define-key selected-keymap (kbd "H") #'my-describe-selected-keymap))

    (unless batch-build
      (postpone-message "selected")
      (selected-global-mode 1))))
#+end_src

=(with-eval-after-load "postpone" ...)= で括った範囲をみると， =selected.el= だけでなく，関連するパッケージまで紐付いて読み込んでいることがわかります．このような設定群をトップレベルで実行したら，起動時間に影響を与えるのは簡単に理解できます．

さて，起動時間に影響するトップレベルでの設定を回避し， =postpone.el= に紐づけた設定群が発動するのがいつかというと， *起動後に初めてEmacsにコマンドを与えるとき* になります．例えば， =M-x= や =C-a= を押下した時です．

したがって， *スケーラブルEmacs起動法* は，Emacsの起動シーケンスを3段階に分割する効果を持ちます．

1. 最小限のトップレベルの設定( =global-set-key= など)で，Emacsを高速起動
2. コマンド入力をトリガーに， *フルアーマー* の一部を =postpone= の効果で遅延設定
3. メジャーモード等の通常の =with-eval-after-load= の発動

このように， *フルアーマー* に至る処理をユーザアクションに合わせて分割することで，ユーザの待ち時間を分散させます．

簡単に言えば，仮に上記のSTEP3までに到達するまでに3秒かかるとしても，各STEPがそれぞれ1秒で済むならば，それほどストレスにならないでしょ？ということです．

*** 改修事例

すでに =use-package= を導入して綺麗に =init.el= を書いている人は無視してOKですが，伝統的な記法で =init.el= を書いている人は， =postpone.el= を導入して，次のように記述を改良すれば，前節のような遅延読み込みが簡単にできます．

*** References
 - [[http://emacs.rubikitch.com/sd1407/][#3 反復練習に勝るものなし -- 打鍵すべし！設定書くべし！ (Software Design 2014年7月号掲載記事) ヘルプシステム 困ったとき 初期設定]]
 - [[http://blog.livedoor.jp/tek_nishi/archives/1948086.html][でらうま倶楽部 : Emacs 設定小ネタ集]]
 - [[https://nagayasu-shinya.com/emacs-bc-cons-threshold/][Emacs ガベージコレクションの発動頻度設定｜gc-cons-threshold | 組込みエンジニアの思うところ]]
 - [[http://emacs-jp.github.io/packages/package-management/package-el.html][package.el - Emacs JP]]
** DONE プッタネスカ                                               :@cooking:
   CLOSED: [2018-09-15 Sat 00:35]
:PROPERTIES:
:EXPORT_FILE_NAME: 0915-pasta-puttanesca
:EXPORT_HUGO_TAGS: "pasta" "tomato"
:CREATED:  [2018-09-25 Tue 00:35]
:END:

ちょっと残念な仕上がり．勇気をもって水を入れるべきだった．

{{< tweet 1040822426286776321 >}}
** DONE 自家製パンチェッタでアマトリチャーナ                       :@cooking:
   CLOSED: [2018-09-16 Sun 00:38]
:PROPERTIES:
:EXPORT_FILE_NAME: 0916-pasta-amatriciana
:EXPORT_HUGO_TAGS: "pasta" "tomato"
:CREATED:  [2018-09-25 Tue 00:38]
:END:

うまく出来た．パンチェッタを次に作る時は，ハーブ入りのクレージーソルトは止めておこう．セロリの感じが強く出過ぎてて，ちと苦手．つまり岩塩選びからやり直しってことね．

{{< tweet 1041191898126245888 >}}
** DONE しめじのペペロンチーノ                                     :@cooking:
   CLOSED: [2018-09-17 Mon 00:42]
:PROPERTIES:
:EXPORT_FILE_NAME: 0917-pastap-peperoncino-shimeji
:EXPORT_HUGO_TAGS: "pasta" "salt"
:CREATED:  [2018-09-25 Tue 00:42]
:END:

トマト系が続いたので，一休みでソルト系．

{{< tweet 1041534430320353280 >}}
** DONE アラビアータ                                               :@cooking:
   CLOSED: [2018-09-22 Sat 00:48]
:PROPERTIES:
:EXPORT_FILE_NAME: 0922-pasta-arrabbiata
:EXPORT_HUGO_TAGS: "pasta" "tomato"
:CREATED:  [2018-09-25 Tue 00:47]
:END:

自家製パンチェッタをじっくり炒めて油を出して，にんにくと唐辛子でがっつん辛いソースに仕上げた．トマトソースは，ソフリットからきちんと作った．時間をかけて作ったから，その分，旨くなっている．気がする．

{{< tweet 1043373022265004033 >}}

トマトソースを作る時は，どうしても詰めている最中にトマトが跳ねるので，網ざるで防御．うわさでは油ハネを防ぐ専用ツールがあるらしい．

{{< tweet 1043359522960490496 >}}
** DONE 玉ねぎのパスタ                                             :@cooking:
   CLOSED: [2018-09-23 Sun 00:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 0923-pasta-onion-solt
:EXPORT_HUGO_TAGS: "pasta" "salt"
:CREATED:  [2018-09-25 Tue 00:52]
:END:

シンプルにオイルで玉ねぎを炒めて，バターを落として塩を振るだけ．十分に旨い．玉ねぎの甘さをより感じるために，オイルはオリーブオイルと太白胡麻油を1:1にしている．

{{< tweet 1043718001462194176 >}}

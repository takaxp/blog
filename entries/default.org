#+hugo_base_dir: ../
#+STARTUP: content
#+macro: latex @@html:<span class="latex">L<sup>A</sup>T<sub>E</sub>X</span>@@
#+options: ^:{}
#+macro: srclink (eval (org-hugo-get-link-to-orgfile "https://github.com/takaxp/blog/blame/master/entries/" "see Orgfile"))

* 2018
:PROPERTIES:
:EXPORT_HUGO_SECTION: 2018
:END:
** DONE ox-hugo テスト                                                :@hugo:
   CLOSED: [2018-08-20 Mon 18:23]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-ox-hugo
:END:

=hugo= と =ox-hugo= を利用したブログ執筆の試験です．

*** Heading1
**** Heading 2

  コンテンツ

**** Heading 3
    - [ ] a
    - [X] b

**** Source blocks

    - elisp

      #+BEGIN_SRC emacs-lisp
      (message "Hello! World")
      #+END_SRC

    - Centered

      #+BEGIN_CENTER
      Centered text
      #+END_CENTER

    - cpp

      #+BEGIN_SRC cpp
      #include <iostream>
      using namespace std;

      int main(){
        cout << "Hello, World!" << endl;
        return 1;
      }
      #+END_SRC

***** Heading 4

  $H(z)$

*** 表

  #+CAPTION: てーぶる
  | 1 | 3 |
  |---+---|
  | 2 | 4 |

*** 装飾

  *太字* , _下線_ , /イタリック/

*** リンク

  [[http://google.co.jp]]， [[http://google.com/][ぐーぐる．こむ]]

*** タスク
**** TODO タスク
     DEADLINE: <2017-03-01 Wed>
** DONE twitter 組み込みテスト                                        :@hugo:
   CLOSED: [2018-08-20 Mon 20:10]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-twitter-card
:END:

Twitter を組み込めるのかを試験します．

{{< tweet 1031404732470898689 >}}

*** References
 - https://gohugo.io/content-management/shortcodes/#example-tweet-input

** DONE YouTube 組み込みテスト                                        :@hugo:
   CLOSED: [2018-08-20 Mon 20:28]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-youtube
:END:

YouTube の動画を組み込めるのかを試験します．

{{< youtube kaw75f11fPU >}}

*** References
 - [[https://gohugo.io/content-management/shortcodes/#example-youtube-input][Shortcodes | Hugo]]

** DONE 数式の展開テスト                                              :@hugo:
   CLOSED: [2018-08-21 Tue 02:05]
:PROPERTIES:
:EXPORT_FILE_NAME: a-mathjax-text
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:CREATED:  [2018-08-21 Tue 02:04]
:END:
*** inline
An inline equation $f(x)$.

*** stand alone without numbering
A standalone equation:
$$ E = mc^{2} $$

*** full equation with numbering

+*うまくいかない* 通常のHTML出力では正しく式番号がレンダリングされる．+

=ox-hugo= の設定では，

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+end_quote

だが，通常のHTML出力では，

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML
#+end_quote

である．

And a full @@html:<span class="latex">L<sup>A</sup>T<sub>E</sub>X</span>@@ equation will be displayed as

\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}

, and could be referenced by (\ref{eq:1}).

最終的に，リファレンスに示された =mathjax-config.js= を利用すればOK．

導入は， =./static/js/mathjax-config.js= として [[https://ox-hugo.scripter.co/js/mathjax-config.js][mathjax-config.js]] を保存し，テーマの中で =mathjax= のスクリプトを記述している箇所に，以下を追加する．

#+begin_src javascript
<!--
 https://github.com/mathjax/MathJax/issues/1988#issuecomment-384978927
 Use plain Javascript to prevent the use of window.eval(). Then
 'unsafe-eval' won't be needed to be added to script-src CSP.
 Also move the mathjax config to a separate file from the inline script so
 that 'unsafe-inline can also be removed from script-src CSP.
-->
<script src="{{ "js/mathjax-config.js" | absURL }}"></script>
#+end_src

これで式番号と =\ref= が効くようになる．

=ox-hugo= の設定は，以下（本来の値）でOKだった．

#+begin_quote
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+end_quote

*** References
 - https://github.com/kaushalmodi/hugo-bare-min-theme/blob/master/layouts/partials/mathjax.html
 - https://ox-hugo.scripter.co/js/mathjax-config.js
** DONE 今週のパスタ                                               :@cooking:
   CLOSED: [2018-08-21 Tue 10:53]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-cooking-report-with-twitter
:CREATED:  [2018-08-21 Tue 10:52]
:END:

こんな感じで調理しています．

{{< tweet 1031028246769426433 >}}

{{< tweet 1028952922116173825 >}}

** DONE Gistの展開テスト                                              :@hugo:
   CLOSED: [2018-08-21 Tue 16:25]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-gist
:END:

ビルトインの shorcodes を使って簡単にできます．

{{< gist takaxp 8f83f07d3fc4b711d2d18f5f82767524 >}}

** DONE アマゾンアフィリエイトコードの展開テスト                      :@hugo:
   CLOSED: [2018-08-23 Thu 00:37]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-asin-shortcode
:CREATED:  [2018-08-23 Thu 00:36]
:END:

[[https://gohugo.io/templates/shortcode-templates/][HUGO shortcodes]]を使って，Amazonアフィリエイトのリンクを組み込みます．

{{< asin B01N3PBDGJ >}}

動かすのはちょっと大変．以下は，今回のために作った shortcodes で，これ加えて，[[https://affiliate.amazon.co.jp/assoc_credentials/home][Product Advertising API ]]を用いたXMLデータのダウンロードスクリプト，XMLからJSON形式のデータを作り， =./data/asin/B01N3PBDGJ.json= として保存しておく必要があります．

#+begin_src html
{{- $asin := .Get 0 -}}
{{- $json := index .Site.Data.asin $asin -}}
{{- $item := $json.ItemLookupResponse.Items.Item -}}
{{- $title := $item.ItemAttributes.Title -}}
{{- $price := $item.ItemAttributes.ListPrice -}}
{{- $image := $item.SmallImage -}}
<div class="asin-box">
  <div class="asin-title">
    <a href="{{ $item.DetailPageURL.value }}" target="_blank">
      製品名: {{ $title.value }}
    </a><br/>
    価格: {{ $price.Amount.value }} {{ $price.CurrencyCode.value }}<br/>
    ASIN: {{ $asin }}
  </div>
  <div class="asin-image">
    <a href="{{ $item.DetailPageURL.value }}" target="_blank">
      <img src="{{ $image.URL.value }}" alt="{{ $title.value }}" width="{{ $image.Width.value }}" height="{{ $image.Height.value }}"/>
    </a>
  </div>
  <div class="asin-metadata"></div>
</div>
#+end_src

書籍だとこんな感じ．

{{< asin 4799106023 >}}

{{< asin 4883998304 >}}

*** References
 - [[https://frdmtoplay.com/using-curl-with-the-amazon-product-request-api/][Using curl with the Amazon Product Request API]]
 - [[http://associates-amazon.s3.amazonaws.com/signed-requests/helper/index.html][Signed Requests Helper - Amazon Product Advertising API]]
 - [[https://docs.aws.amazon.com/AWSECommerceService/latest/DG/HMACSignatures.html][HMAC-SHA256 Signatures for REST Requests - Product Advertising API]]
 - [[https://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html][Example REST Requests - Product Advertising API]]
** DONE 画像の埋め込みテスト                                          :@hugo:
   CLOSED: [2018-08-24 Fri 14:02]
:PROPERTIES:
:EXPORT_FILE_NAME: a-test-of-images
:CREATED:  [2018-08-23 Thu 02:19]
:END:

まず前提として，このサイトのようにドメイン直下にディレクトリを作ってブログを運用する場合には，デフォルトだと =figure= shotcode が正しく動作しない．対応策は， =config.toml= で =canonifyURLs=true= にすること．

画像やその他のファイルの置き場所は，実は繊細な問題で，油断するとサイトが肥大化して管理が行き詰まるし，逆に外部サービスに依存するとサービス停止時に大変なことになる．そして今回は，画像を org バッファでインライン展開するかどうかも変数に入るので中々良い回答が出てこない．

=ox-hugo= の場合は， org バッファのディレクトリに画像を置いて，インライン展開に対応しつつ，content フォルダへの Markdown 出力時に public フォルダへ画像をコピーするという手法も取れる．すると，orgバッファではインライン画像を表示できて，公開したサイトでも正しく画像が表示されるようになる．が，当然ながら Hugoのディレクトリが肥大化する．

ということで，ローカルの肥大化を避けたいので，当面は以下のフローで画像を管理することにする．

1. =static/files/2018= を作成して，2018年のコンテンツをここに置く
2. サーバに同期する
3. org ファイルでは =#+link= を使ってURLを短縮化
4. org ファイルには短縮名で画像を指定する

短縮名設定は，org バッファの先頭で，
#+begin_src org
#+link: files https://pxaka.tokyo/blog/files/2018/
#+end_src
と記述して，同行上で =C-c C-c= で忘れずに有効化する．

後は，通常のリンク記述で =files:= を使えばパスを簡略記入できる．

#+begin_src org
[[files:twitter.jpg]]
#+end_src

この記述は，

#+begin_src 
[[https://pxaka.tokyo/blog/files/2018/twitter.jpg]]
#+end_src

に展開されるので，サーバにファイルが置かれていれば，確実に画像を埋め込むことができる．将来ファイルパスやドメインを変えたとしても， =#+link= 側の値を変えれば良い．

万が一ローカルが肥大化したら， =./static/files= を削除して，サーバにだけコンテンツを置く，或いは， =./static/files= はシンボリックリンクで飛ばしてもよい．

最終的には，
1. D&Dでサーバ上の所定のディレクトリにサーバアップロード
2. アップロード時にサムネイルを同時作成
3. shortcodes のリンク生成を改良して，リンク先は大きな画像，表示は小さな画像を使う
とするのが目標．その他のファイル（PDFとかExcelとか）はアップロード時にサムネイル作成ってのも良い．

以下，適当に実験．

#+attr_html: :width 128px
[[file:/files/2018/twitter.jpg]]

#+attr_html: :width 128px
[[file:~/Dropbox/org/blog/static/files/2018/twitter.jpg][/files/2018/twitter.jpg]]

http://localhost:1313/blog/files/2018/twitter.jpg

#+attr_html: :width 128px
[[../static/files/2018/twitter.jpg][files/2018/twitter.jpg]]

[[https://pbs.twimg.com/profile_images/892836904202149888/p_UbMC5Q_400x400.jpg]]

#+attr_html: :width 128px
https://pbs.twimg.com/profile_images/892836904202149888/p_UbMC5Q_400x400.jpg

#+attr_html: :width 128px
[[https://pxaka.tokyo/owncloud/index.php/s/sf1CNSc3oLfKfuq]]

#+attr_html: :width 128px
[[files:%E3%81%A4%E3%81%84%E3%81%A3%E3%81%9F %E3%81%AE %E7%94%BB%E5%83%8F.jpg]]

#+attr_html: :width 100px
[[files:twitter.jpg]]

=#+link= に非依存で正しく表示される．インライン不可．

[[/files/2018/twitter.jpg]]

#+attr_html: :width 128px
[[files:twitter.jpg][file:/files/2018/twitter.jpg]]

*** References
 - [[https://github.com/gohugoio/hugo/issues/4562][Figure shortcode with baseURL · Issue #4562 · gohugoio/hugo]]
** DONE ファイル名をUUIDで自動生成するテスト                          :@hugo:
   CLOSED: [2018-08-24 Fri 19:44]
:PROPERTIES:
:EXPORT_FILE_NAME: 44febe88-04a5-9bc4-6bfb-678a8477a0ed
:CREATED:  [2018-08-24 Fri 19:39]
:END:

次のように =org-capture= を準備して， =C-c r B= 押下すると，テンプレートが立ち上がる．カーソルはタイトル行に置かれる． =C-c C-c= を押してそのまま保存でも良いが，それなりの分量の文章を書くならば， =C-u C-c C-c= として保存先のサブツリーに移動してから編集する方がより安全といえる．

#+begin_src emacs-lisp
(with-eval-after-load "org-capture"
  (defvar org-capture-blog-file
    (concat org-directory "blog/entries/default.org"))
  (setq org-capture-templates
        `(("B" "Create new post for imadenale blog (UUID)" entry
           (file+headline ,org-capture-blog-file ,(format-time-string "%Y"))
           "** TODO %?\n:PROPERTIES:\n:EXPORT_FILE_NAME: %(uuid-string)\n:END:\n")
          ("b" "Create new post for imadenale blog" entry
           (file+headline ,org-capture-blog-file ,(format-time-string "%Y"))
           "** TODO \n:PROPERTIES:\n:EXPORT_FILE_NAME: %?\n:END:\n"))))
#+end_src
** DONE Hugo の data ディレクトリ                                     :@hugo:
   CLOSED: [2018-08-25 Sat 04:11]
:PROPERTIES:
:EXPORT_FILE_NAME: 62d73d4b-439b-cf74-1bf3-ecae75bd7bd2
:CREATED:  [2018-08-25 Sat 03:54]
:END:

環境構築がほぼ完了．基本的な処理フローは？と言えば，「書いて，デプロイ」のホント2ステップだけ．

1. Emacs Org Mode でメモを取るように書く（org-capture経由もOK）
2. deploy スクリプトを走らせる（サーバにrsyncしたり，githubにpush）

以上，楽すぎた．ありがとう [[https://orgmode.org][Org Mode]]，[[https://gohugo.io/][Hugo]]，[[https://ox-hugo.scripter.co/][ox-hugo]] たち！

さて，Hugoさん， =data= 以下にいわゆるプロセッシング対象のデータを =json= 形式で配置すると，[[https://gohugo.io/content-management/shortcodes/][shortcodes]] で色々と楽しめるのね．これって，ちょっと工夫すれば，料理のレシピ管理に使えるよという話かなと．なお保存方法は =json= 以外に， =yaml=, =toml= もOK．

{{< youtube id="FyPgSuwIMWQ" class="my-yt" >}}

で，Go, Json, SQLite でざっくり調べると，なかなに面白い情報があって，これはテンション上がる．

*** References
 - [[https://gohugo.io/templates/data-templates/][Data Templates | Hugo]]
 - [[https://stackoverflow.com/questions/48534992/json-fields-from-sqlite3-in-golang][sqlite - JSON fields from sqlite3 in golang - Stack Overflow]]
** DONE 完熟あらごしトマトを使ってみた                             :@cooking:
   CLOSED: [2018-08-28 Tue 02:57]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-with-new-tomato-source
:EXPORT_HUGO_TAGS: pasta tomato cream
:CREATED:  [2018-08-28 Tue 02:40]
:END:

近所のスーパーで試したことのないトマトソースを見つけたので使ってみた．味付けされていないプレーンなソースなので，玉ねぎをソテーして混ぜて使う．

{{< asin B015FIJYZ8 >}}

価格は1つのパックあたり100円ちょっとで，缶で売られているプレーンなトマトソースよりも少し安めの印象．

{{< tweet 1033555146364440576 >}}

今回は，アンチョビ・ケイパーを使ってプッタネスカ風のベースを作って，牛乳を少し加えてみた．加えた牛乳の分量で言えば，80[cc]程度（二皿用）．いわゆるトマトクリーム的な味わいを期待したけど，やはりちょっと牛乳を加えたくらいでは中途半端になり，しかも生クリームより水分が多いので，ソースを詰めようとする間に風味が飛んでしまうことがわかった．クリームソースには普通に生クリームを使うのが良さそうね．太るよね．

{{< tweet 1033571011898163200 >}}

実は玉ねぎを炒める時に，若干火を入れすぎてしまい，トマトソースはとても濃い色に．牛乳を加えることで，ソースの色が落ち着いた感じになった．味はまぁまぁ．

ごちそうさまでした．
** DONE (ベビー)ホタテのトマトクリームパスタ                       :@cooking:
   CLOSED: [2018-08-30 Thu 13:13]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-tomato-fresh-cream
:EXPORT_HUGO_TAGS: pasta tomato cream
:CREATED:  [2018-09-02 Sun 20:40]
:END:

スーパーで生クリームを探したら，以前は置かれていなかった100[ml]タイプが置かれていたので購入．早速，前回は納得がいかなかったトマトクリームに再挑戦．具材は魚貝が良さそうなので，ベビーホタテを採用．

{{< tweet 1034768304051642368 >}}

にんにく，玉ねぎ，そして貝柱以外を細かく刻んでまずソテー．アンチョビを入れてオイルに馴染ませたら，トマトソースを入れて加熱，温度が安定したら貝柱を入れて，最後に生クリームを投入．黒胡椒を挽いて完成．

それっぽい見た目とそれっぽい味になったけど，ちょっと違う感じ．

生クリームは適当に使う食材じゃないことはわかった．

ごちそうさまでした．

{{{srclink}}}

** DONE 和風クリームパスタに挑戦                                   :@cooking:
   CLOSED: [2018-09-02 Sun 20:47]
:PROPERTIES:
:EXPORT_FILE_NAME: pasta-fresh-cream-jp-style
:EXPORT_HUGO_TAGS: pasta cream
:CREATED:  [2018-09-02 Sun 20:40]
:END:

教科書として常備している落合シェフの本．

{{< asin 4388062081 >}}

今回はこの教科書をちゃんと読んでから，自分の中ではハズレのない和風パスタに応用してみた．とても旨かった．

{{< tweet 1036104469098840064 >}}

先日のトマトクリームパスタがいまいちだったので，シェフの教科書をよく読んでみると，生クリームの使い方にはいくつかのセオリーがあるようだ．教科書の ~P.118~ にある「生ハムとグリーンピース入りクリーム風味のフェットチーネ」のレシピから引用する．

#+begin_quote
クリーム系のソースの決め手となるのが塩加減で、これがむずかしい。
#+end_quote

#+begin_quote
最終的な塩見はやや強めにきかせる。
#+end_quote

#+begin_quote
最初のサラリとした常態から、この程度のとろみが付けばOK。（略）煮詰めてコクを出し、（略）とろみをつける。
#+end_quote

なるほど，なるほど．ちなみに教科書のこのメニューは，「パン・プロ・ピー」と呼ばれているらしい。

#+begin_quote
イタリアでは、パンナ（生クリーム）、プロシュート（生ハム）、ピゼッリ（豆）の頭をとって，「パン・プロ・ピー」の愛称で呼ばれている、おなじみのメニューだ。
#+end_quote

さて，今回のチャレンジで総じて理解したのは，大きく3つ．
- 生クリームを使うと，麺の舌触りが変わり滑らかになる．
- 生クリームは沸騰させてはだめだが，詰めるのはOK．
- 塩見は強めを意識する．
- 和風と合わせても大丈夫，むしろ旨い．

#+caption: レシピ（材料・二皿分）
| 材料       | 分量   |
|------------+--------|
| 玉ねぎ(中) | 1/4個  |
| ベーコン   | 適量   |
| 舞茸       | 適量   |
| みりん     | 20[cc] |
| 白だし     | 40[cc] |
| 生クリーム | 60[cc] |
| オイル     | 30[cc] |
| 茹で汁(1%) | 30[cc] |
| バター     | 10[g]  |
| パスタ     | 170[g] |

いつもの和風パスタは，みりん・白だし・醤油でベースを作るけども，醤油を入れると生クリームの色が活かせないと判断して，今回は白だしだけにした．また上記の「強めの塩見」は，バター，茹で汁，そして白だしを使うことでクリアしている．

まだまだ改良は必要だろうけども，初回にしては味も見た目も満足．

ごちそうさまでした．

{{{srclink}}}
** DONE 記事の Org file にリンクを貼る                                :@hugo:
   CLOSED: [2018-09-03 Mon 17:02]
:PROPERTIES:
:EXPORT_FILE_NAME: a-link-to-the-original-org-source-file
:EXPORT_HUGO_TAGS: orgmode
:CREATED:  [2018-09-03 Mon 16:55]
:END:

せっかく [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] で記事を書いているので，Hugo記事のソースとなる orgfile を明示したい．

毎度手動でそのリンクを生成するのは面倒なので，マクロで実現してみる．

まず，マクロから呼び出す関数を書く．

#+begin_src emacs-lisp
(defun org-hugo-get-link-to-orgfile (uri alt)
      "Return a formatted link to the original Org file."
      (let ((line (save-excursion
                    (save-restriction
                      (unless (org-at-heading-p)
                        (org-previous-visible-heading 1))
                      (line-number-at-pos)))))
        (concat "[[" uri (file-name-nondirectory (buffer-file-name))
                "#L" (format "%d" line) "][" alt "]]")))
#+end_src

で，これを，編集中の orgfile の =#+macro= で使う．こんな感じ．

#+begin_src org
#+macro: srclink (eval (org-hugo-get-link-to-orgfile "https://github.com/takaxp/blog/blame/master/entries/" "see Orgfile"))
#+end_src

第一引数を，ソースを配置するサイトのURI．ファイル名の直前までを指定する．スラッシュを忘れずに．

第二引数に，HTML上で表示されるリンク名を指定する．

そして，記事の執筆時に，以下を埋め込めば，対応するソース（行単位）に転送してくれるリンクがエクスポート時に勝手に埋め込まれる．

#+begin_src org
{{{srclink}}}
#+end_src

しばらくこれで運用してみる．

{{{srclink}}}

* 2019
:PROPERTIES:
:EXPORT_HUGO_SECTION: 2019
:CREATED:  [2018-08-29 Wed 09:07]
:END:
